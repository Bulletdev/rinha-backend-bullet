/*
 * Rinha de Backend 2024/Q1 API
 * API para gerenciamento de transações financeiras e consulta de extratos. Desenvolvida com Java 21 utilizando Project Loom (Virtual Threads) para alta concorrência. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contato@michaelbullet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransacaoRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T14:17:50.441968300-03:00[America/Sao_Paulo]", comments = "Generator version: 7.7.0")
public class TransacaoRequest {
  public static final String SERIALIZED_NAME_VALOR = "valor";
  @SerializedName(SERIALIZED_NAME_VALOR)
  private Integer valor;

  /**
   * Tipo da transação (c para crédito, d para débito)
   */
  @JsonAdapter(TipoEnum.Adapter.class)
  public enum TipoEnum {
    C("c"),
    
    D("d");

    private String value;

    TipoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TipoEnum fromValue(String value) {
      for (TipoEnum b : TipoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TipoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TipoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TipoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TipoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TipoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIPO = "tipo";
  @SerializedName(SERIALIZED_NAME_TIPO)
  private TipoEnum tipo;

  public static final String SERIALIZED_NAME_DESCRICAO = "descricao";
  @SerializedName(SERIALIZED_NAME_DESCRICAO)
  private String descricao;

  public TransacaoRequest() {
  }

  public TransacaoRequest valor(Integer valor) {
    this.valor = valor;
    return this;
  }

  /**
   * Valor da transação em centavos (número inteiro positivo)
   * minimum: 1
   * @return valor
   */
  @javax.annotation.Nonnull
  public Integer getValor() {
    return valor;
  }

  public void setValor(Integer valor) {
    this.valor = valor;
  }


  public TransacaoRequest tipo(TipoEnum tipo) {
    this.tipo = tipo;
    return this;
  }

  /**
   * Tipo da transação (c para crédito, d para débito)
   * @return tipo
   */
  @javax.annotation.Nonnull
  public TipoEnum getTipo() {
    return tipo;
  }

  public void setTipo(TipoEnum tipo) {
    this.tipo = tipo;
  }


  public TransacaoRequest descricao(String descricao) {
    this.descricao = descricao;
    return this;
  }

  /**
   * Descrição da transação (entre 1 e 10 caracteres)
   * @return descricao
   */
  @javax.annotation.Nonnull
  public String getDescricao() {
    return descricao;
  }

  public void setDescricao(String descricao) {
    this.descricao = descricao;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransacaoRequest transacaoRequest = (TransacaoRequest) o;
    return Objects.equals(this.valor, transacaoRequest.valor) &&
        Objects.equals(this.tipo, transacaoRequest.tipo) &&
        Objects.equals(this.descricao, transacaoRequest.descricao);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valor, tipo, descricao);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransacaoRequest {\n");
    sb.append("    valor: ").append(toIndentedString(valor)).append("\n");
    sb.append("    tipo: ").append(toIndentedString(tipo)).append("\n");
    sb.append("    descricao: ").append(toIndentedString(descricao)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("valor");
    openapiFields.add("tipo");
    openapiFields.add("descricao");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("valor");
    openapiRequiredFields.add("tipo");
    openapiRequiredFields.add("descricao");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransacaoRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransacaoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransacaoRequest is not found in the empty JSON string", TransacaoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransacaoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransacaoRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransacaoRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("tipo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tipo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tipo").toString()));
      }
      // validate the required field `tipo`
      TipoEnum.validateJsonElement(jsonObj.get("tipo"));
      if (!jsonObj.get("descricao").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descricao` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descricao").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransacaoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransacaoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransacaoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransacaoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransacaoRequest>() {
           @Override
           public void write(JsonWriter out, TransacaoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransacaoRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransacaoRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransacaoRequest
   * @throws IOException if the JSON string is invalid with respect to TransacaoRequest
   */
  public static TransacaoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransacaoRequest.class);
  }

  /**
   * Convert an instance of TransacaoRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

